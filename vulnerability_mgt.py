
#date formating https://www.programiz.com/python-programming/datetime/strftime
import requests
from bs4 import BeautifulSoup
import smtplib
from email.message import EmailMessage
import arrow
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta



URL = 'https://www.cvedetails.com/vulnerability-list/vendor_id-3080/Fortinet.html'
headers = {"User-Agent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0'}

URL_Forti_data = requests.get('https://www.cvedetails.com/vulnerability-list/vendor_id-3080/product_id-6632/Fortinet-Fortios.html')
#URL_Forti_data = requests.get('https://www.cvedetails.com/vulnerability-list/vendor_id-3080/Fortinet.html')

#load data to bs4
soup =  BeautifulSoup(URL_Forti_data.text, 'html.parser')

#tableVuln = soup.find('table',{'id':'vulnslisttable'},{'class':'searchresults sortable'})
tableVuln = soup.find('table',{'id':'vulnslisttable'})

CVEsummary = soup.findAll('td',{'class':'cvesummarylong'})

#print each line under class srrowns, lines which contains info on the cve dtails, date, sev...etc...
rows = tableVuln.find_all('tr',{'class':'srrowns'})

    # print the whole table
    # '22', 'CVE-2020-9294', '287', '2020-04-27', '2020-05-04', '7.5', 'None', 'Remote', 'Low', 'Not', 'required', 'Partial', 'Partial', 'Partial']
    #print(td.text.split()) 

## ---------------------------------------- fortinet ------------------------------------------------------------
#outfile=open("Fortinet_Vulnerability.txt", "w").close()
outfile = open('Fortinet_Vulnerability.txt','w')
outfile.write(' Vulnerability with a score > 7''\n\n')
countforti=1
data_row1=[]
count_details = 0
count_previousmonth = 0
#loop through each data in the row 
for td in rows:
    #extract specific columns from the table
    place = td.find_all('td')[0].text.split()
    data_row1.append(place)
    cveref = td.find_all('td')[1].text.split()
    data_row1.append(cveref)
    datecve = td.find_all('td')[5].text.split()
    data_row1.append(datecve)
    dateupdate = td.find_all('td')[6].text.split()
    sev = td.find_all('td')[7].text.split()
    data_row1.append(sev)
    
    # convert the date datecve[0] from string to format date
    ToTimeDatecve = datetime.strptime(datecve[0], "%Y-%m-%d")
    #print('format cvd date :',ToTimeDatecve)
    #print('datecve[0] converted to time  =',ToTimeDatecve.strftime("%Y-%m"))
    
    # June 2021 format https://stackoverflow.com/questions/38794935/python-get-last-month-and-year?rq=1
    last_month = datetime.today().replace(day=1) - timedelta(1)             
    print('Last month = ', last_month.strftime("%Y-%m"))

    #print(str(last_month.strftime("%Y-%m")))
    #print(str(ToTimeDatecve.strftime("%Y-%m")))

    # check for Vulnerabilities for the previous month
    if (ToTimeDatecve.strftime("%Y-%m") ==last_month.strftime("%Y-%m")) == True:
        print('BAZIIIINNNNGGAAAAA Last month hit')
        #MODULE : EXTRACT [check for CVE > 7 and print to file]
        if float(sev[0]) >= 7:
            print('!!!!!!!   Severity is high !!!!!!!!!!!')
            ## extract href - hyperlink to the  invidual CVE
            print('Details : ' , CVEsummary[count_details].text.strip())
            a_tag=td.find_all('a')
            # print(a_tag[1]['href'])
            link =  td.find_all('td')[1].find('a')
            print(link['href'])
            outfile.write('#' + place[0]+ '  REF:'  + cveref[0]+ '  Date:'  + datecve[0]+ ' '  + dateupdate[0] + '  Score:' + str(sev[0]) + '\n' "link :" + 'https://www.cvedetails.com'+link['href'] + '\n' "Details : " + CVEsummary[count_details].text.strip() +'\n\n')
        # END MODULE : EXTRACT [check for CVE > 7 and print to file]  
        
    else:
        print ('Previous months vulnerabilities')
        if count_previousmonth == 1:
            outfile.write('Previous months vulnerabilities' + '\n\n')
        #outfile.write('#' + place[0]+ '  REF:'  + cveref[0]+ '  Date:'  + datecve[0]+ ' '  + dateupdate[0] + '  Score:' + str(sev[0]) + '\n' "link :" + 'https://www.cvedetails.com'+link['href'] + '\n' "Details : " + CVEsummary[count_details].text.strip() +'\n\n')
   




    #print(float(sev[0]))
    #print('#',place[0],cveref[0],datecve[0],dateupdate[0],float(sev[0]))
    countforti = countforti +1
    count_details = count_details +1
    count_previousmonth = count_previousmonth +1
outfile.close()   
## END ---------------------------------------- fortinet ------------------------------------------------------------



## ---------------------------------------- Checkpoint ------------------------------------------------------------

URL_Checkpt_data = requests.get('https://www.cvedetails.com/vulnerability-list/vendor_id-136/Checkpoint.html')

#load data to bs4
soup1 =  BeautifulSoup(URL_Checkpt_data.text, 'html.parser')

#tableVuln = soup.find('table',{'id':'vulnslisttable'},{'class':'searchresults sortable'})
tableVuln = soup1.find('table',{'id':'vulnslisttable'})

CVEsummary = soup1.findAll('td',{'class':'cvesummarylong'})

#print each line under class srrowns, lines which contains info on the cve dtails, date, sev...etc...
rows = tableVuln.find_all('tr',{'class':'srrowns'})

    # print the whole table
    # '22', 'CVE-2020-9294', '287', '2020-04-27', '2020-05-04', '7.5', 'None', 'Remote', 'Low', 'Not', 'required', 'Partial', 'Partial', 'Partial']
    #print(td.text.split()) 



#outfile=open("Fortinet_Vulnerability.txt", "w").close()
outfile = open('Checkpoint_Vulnerability.txt','w')
outfile.write(' Vulnerability with a score > 7''\n\n')
countckhp=1
def printtofile():
    #outfile.write('There was no vulnerability with a score > 7 for the month of ' +last_month.strftime("%b-%Y")+'\n')
    print('')
data_row1=[]
count_details = 0
#loop through each data in the row 
for td in rows:
    #extract specific columns from the table
    place = td.find_all('td')[0].text.split()
    data_row1.append(place)
    cveref = td.find_all('td')[1].text.split()
    data_row1.append(cveref)
    datecve = td.find_all('td')[5].text.split()
    data_row1.append(datecve)
    dateupdate = td.find_all('td')[6].text.split()
    sev = td.find_all('td')[7].text.split()
    data_row1.append(sev)
    
    # convert the date datecve[0] from string to format date
    ToTimeDatecve = datetime.strptime(datecve[0], "%Y-%m-%d")
    print('format cvd date :',ToTimeDatecve)
    print('datecve[0] converted to time  =',ToTimeDatecve.strftime("%Y-%m"))
    
    # June 2021 format https://stackoverflow.com/questions/38794935/python-get-last-month-and-year?rq=1
    last_month = datetime.today().replace(day=1) - timedelta(1)             
    print('Last month = ', last_month.strftime("%Y-%m"))

    print(str(last_month.strftime("%Y-%m")))
    print(str(ToTimeDatecve.strftime("%Y-%m")))

    # check for Vulnerabilities for the previous month
    if (ToTimeDatecve.strftime("%Y-%m") ==last_month.strftime("%Y-%m")) == True:
        print('BAZIIIINNNNGGAAAAA')
        #MODULE : EXTRACT [check for CVE > 7 and print to file]
        if float(sev[0]) >= 7:
            print('!!!!!!!   Severity is high !!!!!!!!!!!')
            ## extract href - hyperlink to the  invidual CVE
            a_tag=td.find_all('a')
            # print(a_tag[1]['href'])
            link =  td.find_all('td')[1].find('a')
            print(link['href'])
            outfile.write('#' + place[0]+ '  REF:'  + cveref[0]+ '  Date:'  + datecve[0]+ ' '  + dateupdate[0] + '  Score:' + str(sev[0]) + '\n' "link :" + 'https://www.cvedetails.com'+link['href'] + '\n' "Details : " + CVEsummary[count_details].text.strip() +'\n\n')
        # END MODULE : EXTRACT [check for CVE > 7 and print to file]  
        else:
            
            print ('XX')
            if countckhp==1:
                
                outfile.write('There was no vulnerability with a score > 7 for the month of ' +last_month.strftime("%b-%Y")+'\n')
    
        
  
    countckhp = countckhp + 1
    count_details = count_details +1    
    #print(float(sev[0]))
    #print('#',place[0],cveref[0],datecve[0],dateupdate[0],float(sev[0]))
outfile.close()   
## END ---------------------------------------- Checkpoint ------------------------------------------------------------
   




## ---------------------------------------- IBM QRADAR ------------------------------------------------------------

URL_QRADAR_data = requests.get('https://www.cvedetails.com/vulnerability-list/vendor_id-14/product_id-25220/IBM-Qradar-Security-Information-And-Event-Manager.html')

#load data to bs4
soup1 =  BeautifulSoup(URL_QRADAR_data.text, 'html.parser')

#tableVuln = soup.find('table',{'id':'vulnslisttable'},{'class':'searchresults sortable'})
tableVuln = soup1.find('table',{'id':'vulnslisttable'})

CVEsummary = soup1.findAll('td',{'class':'cvesummarylong'})

#print each line under class srrowns, lines which contains info on the cve dtails, date, sev...etc...
rows = tableVuln.find_all('tr',{'class':'srrowns'})

    # print the whole table
    # '22', 'CVE-2020-9294', '287', '2020-04-27', '2020-05-04', '7.5', 'None', 'Remote', 'Low', 'Not', 'required', 'Partial', 'Partial', 'Partial']
    #print(td.text.split()) 



#outfile=open("Fortinet_Vulnerability.txt", "w").close()
outfile = open('QRADAR_Vulnerability.txt','w')
outfile.write('Vulnerability with a score > 7''\n\n')
countqradar=1
def printtofile():
    #outfile.write('There was no vulnerability with a score > 7 for the month of ' +last_month.strftime("%b-%Y")+'\n')
    print('')
data_row1=[]
count_details = 0
#loop through each data in the row 
for td in rows:
    #extract specific columns from the table
    place = td.find_all('td')[0].text.split()
    data_row1.append(place)
    cveref = td.find_all('td')[1].text.split()
    data_row1.append(cveref)
    datecve = td.find_all('td')[5].text.split()
    data_row1.append(datecve)
    dateupdate = td.find_all('td')[6].text.split()
    sev = td.find_all('td')[7].text.split()
    data_row1.append(sev)
    
    # convert the date datecve[0] from string to format date
    ToTimeDatecve = datetime.strptime(datecve[0], "%Y-%m-%d")
    print('format cvd date :',ToTimeDatecve)
    print('datecve[0] converted to time  =',ToTimeDatecve.strftime("%Y-%m"))
    
    # June 2021 format https://stackoverflow.com/questions/38794935/python-get-last-month-and-year?rq=1
    last_month = datetime.today().replace(day=1) - timedelta(1)             
    print('Last month = ', last_month.strftime("%Y-%m"))

    print(str(last_month.strftime("%Y-%m")))
    print(str(ToTimeDatecve.strftime("%Y-%m")))

    # check for Vulnerabilities for the previous month
    if (ToTimeDatecve.strftime("%Y-%m") ==last_month.strftime("%Y-%m")) == True:
        print('BAZIIIINNNNGGAAAAA')
        #MODULE : EXTRACT [check for CVE > 7 and print to file]
        if float(sev[0]) >= 7:
            print('!!!!!!!   Severity is high !!!!!!!!!!!')
            ## extract href - hyperlink to the  invidual CVE
            a_tag=td.find_all('a')
            # print(a_tag[1]['href'])
            link =  td.find_all('td')[1].find('a')
            print(link['href'])
            outfile.write('#' + place[0]+ '  REF:'  + cveref[0]+ '  Date:'  + datecve[0]+ ' '  + dateupdate[0] + '  Score:' + str(sev[0]) + '\n' "link :" + 'https://www.cvedetails.com'+link['href'] + '\n' "Details : " + CVEsummary[count_details].text.strip() +'\n\n')
        # END MODULE : EXTRACT [check for CVE > 7 and print to file]  
        else:
            
            print ('XX')
            if countqradar==1:
                
                outfile.write('There was no vulnerability with a score > 7 for the month of ' +last_month.strftime("%b-%Y")+'\n')
    else:

        if countqradar==1:     
                outfile.write('There was no vulnerability on IBM QRADAR with a score > 7 for the month of ' +last_month.strftime("%b-%Y")+'\n')
  
    countqradar = countqradar + 1 
    count_details = count_details +1   
    #print(float(sev[0]))
    #print('#',place[0],cveref[0],datecve[0],dateupdate[0],float(sev[0]))
outfile.close()   
## END ---------------------------------------- IBM QRADAR ------------------------------------------------------------




## ---------------------------------------- f5 ------------------------------------------------------------

URL_f5_data = requests.get('https://www.cvedetails.com/vulnerability-list/vendor_id-315/F5.html')

#load data to bs4
soup1 =  BeautifulSoup(URL_f5_data.text, 'html.parser')

#tableVuln = soup.find('table',{'id':'vulnslisttable'},{'class':'searchresults sortable'})
tableVuln = soup1.find('table',{'id':'vulnslisttable'})

CVEsummary = soup1.findAll('td',{'class':'cvesummarylong'})

#print each line under class srrowns, lines which contains info on the cve dtails, date, sev...etc...
rows = tableVuln.find_all('tr',{'class':'srrowns'})

    # print the whole table
    # '22', 'CVE-2020-9294', '287', '2020-04-27', '2020-05-04', '7.5', 'None', 'Remote', 'Low', 'Not', 'required', 'Partial', 'Partial', 'Partial']
    #print(td.text.split()) 



#outfile=open("Fortinet_Vulnerability.txt", "w").close()
outfile = open('f5_Vulnerability.txt','w')
outfile.write('Vulnerability with a score > 7''\n\n')
countf5=1
def printtofile():
    #outfile.write('There was no vulnerability with a score > 7 for the month of ' +last_month.strftime("%b-%Y")+'\n')
    print('')
data_row1=[]
count_details = 0
#loop through each data in the row 
for td in rows:
    #extract specific columns from the table
    place = td.find_all('td')[0].text.split()
    data_row1.append(place)
    cveref = td.find_all('td')[1].text.split()
    data_row1.append(cveref)
    datecve = td.find_all('td')[5].text.split()
    data_row1.append(datecve)
    dateupdate = td.find_all('td')[6].text.split()
    sev = td.find_all('td')[7].text.split()
    data_row1.append(sev)
    
    # convert the date datecve[0] from string to format date
    ToTimeDatecve = datetime.strptime(datecve[0], "%Y-%m-%d")
    print('format cvd date :',ToTimeDatecve)
    print('datecve[0] converted to time  =',ToTimeDatecve.strftime("%Y-%m"))
    
    # June 2021 format https://stackoverflow.com/questions/38794935/python-get-last-month-and-year?rq=1
    last_month = datetime.today().replace(day=1) - timedelta(1)             
    print('Last month = ', last_month.strftime("%Y-%m"))

    print(str(last_month.strftime("%Y-%m")))
    print(str(ToTimeDatecve.strftime("%Y-%m")))
    
    # check for Vulnerabilities for the previous month
    if (ToTimeDatecve.strftime("%Y-%m") ==last_month.strftime("%Y-%m")) == True:
        print('BAZIIIINNNNGGAAAAA')
        #MODULE : EXTRACT [check for CVE > 7 and print to file]
        if float(sev[0]) >= 7:
            print('!!!!!!!   Severity is high !!!!!!!!!!!')
            print('summary = ',CVEsummary[count_details].text.split())
            ## extract href - hyperlink to the  invidual CVE
            a_tag=td.find_all('a')
            # print(a_tag[1]['href'])
            link =  td.find_all('td')[1].find('a')
            print(link['href'])
            outfile.write('#' + place[0]+ '  REF:'  + cveref[0]+ '  Date:'  + datecve[0]+ ' '  + dateupdate[0] + '  Score:' + str(sev[0]) + '\n' "link :" + 'https://www.cvedetails.com'+link['href'] + '\n' "Details : " + CVEsummary[count_details].text.strip() +'\n\n')
        # END MODULE : EXTRACT [check for CVE > 7 and print to file]  
        else:
            
            print ('XX')
           
    else:

        if countf5==1:     
                outfile.write('There was no vulnerability on IBM QRADAR with a score > 7 for the month of ' +last_month.strftime("%b-%Y")+'\n')
  
    countf5 = countf5 + 1    
    #print(float(sev[0]))
    #print('#',place[0],cveref[0],datecve[0],dateupdate[0],float(sev[0]))
    count_details = count_details + 1
outfile.close()   
## END ---------------------------------------- f5 ------------------------------------------------------------




#SEND MAIL---------------------------------------------------------------------------------    
server = smtplib.SMTP('<your smtp relay>',587)

contacts = ['address1','address2']

user='<userlogin for smtp>'
passW = '<password>'

msg = EmailMessage()
msg['Subject'] = '#BETA# VULNERABILITY REPORT # ' + last_month.strftime("%b %Y")
msg['From'] = 'Vulnerability Management'
msg['To'] = contacts
msg.set_content('this is a plain text')


textmsg =("""\
        <!DOCTYPE html>
        <html>
            <body>
                <h1 style="color:SlateGray;">Security Vulnerability Management</h1>
                
               
                <p> This mail contains attachement for vendor vulnerbalities scrapped from https://www.cvedetails.com/vulnerability-list/.
                <p> Vulnerabilites included for this beta are : </p>
                <p>      - Fortigates </p>
                <p>     - Checkpoints </p>
                <p>     - IBM QRADAR </p>
                <p></p>
                <p></p>
      

                </tr>
                <p>Future works  </p>
                <p>     1.  will include f5 Bigip and Cisco Ironports</p>
                <p>     2.  immediate notification if a score <b> > 9 </b> is published </p>
                <p>     3.  a suitable host for the script to run </p>
                <p>     4.  documentation </p>
            </body>
        </html>
    """)
textmsg = textmsg.format(cveref[0], datecve[0], sev[0])
#outfile.write('#' + place[0]+ '  REF:'  + cveref[0]+ '  Date:'  + datecve[0]+ ' '  + dateupdate[0] + '  Score:' + str(sev[0]) + '\n' "link :" + 'https://www.cvedetails.com'+link['href'] + '\n' "Details : " + CVEsummary[count_details].text.strip() +'\n\n')

    #### HTML
msg.add_alternative( textmsg, subtype='html')



    ## add attachement
    #add several attachements
files = ['Fortinet_Vulnerability.txt','Checkpoint_Vulnerability.txt','QRADAR_Vulnerability.txt','f5_Vulnerability.txt']
#files = ['Fortinet_Vulnerability.txt']
for file in files:
    with open(file,'rb') as f:
            file_data = f.read()
            file_name = f.name
        #msg.add_attachment(file_data,filename =file_name)
    msg.add_attachment(file_data,maintype='application',subtype='octet-stream',filename =file_name)

    
    
server.login(user,passW)
server.send_message(msg)
print('message sent>>>>>>>>>>>>>>>>>.')
server.quit()

#END SEND MAIL---------------------------------------------------------------------------------------






## scrap

'''
print(datetime.today().strftime('%Y-%m-%d'))

d_now = datetime.today().strftime('%Y-%m-%d')
d_compare = datecve[0]
print('haha;', d_now<d_compare)

print(datecve[0])

# Returns the same day of last month if possible otherwise end of month
# (eg: March 31st->29th Feb an July 31st->June 30th)
last_month = datetime.now() - relativedelta(months=1)
# Create string of month name and year...
text = format(last_month, '%b %Y')
print(text)

'''


'''
# 202106 format - https://techies-world.com/how-to-get-previous-month-in-python/
import datetime
today = datetime.date.today()
first = today.replace(day=1)
lastMonth = first - datetime.timedelta(days=1)
print('CVE Detail month = ', datecve[0])
print('Last month =  ',lastMonth.strftime("%Y-%m"))

current_month = arrow.now().format('YYYY-MM-DD')
print ('arrow  ',arrow.now().format('YYYY-MM-DD'))

'''
